{"version":3,"sources":["components/AddCategory.js","components/GifGridItems.js","components/GifGrid.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","className","type","value","onChange","target","GifGridItems","img","title","url","src","alt","GifGrid","category","images","setImages","loading","setLoading","useEffect","setTimeout","getGifs","a","busqueda","encodeURI","fetch","response","json","data","result","map","iter","id","downsized_medium","Header","href","InitialCategories","App","categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iMAgDeA,EA9CK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGlB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,eAAC,WAAD,WACI,mDAEA,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAASP,GAAT,mBAAwBO,OACtCN,EAAc,MASd,SACI,qBAAKO,UAAU,OAAf,SACI,qBAAKA,UAAU,OAAf,SACI,uBACIC,KAAK,OACLD,UAAU,eACVE,MAAOV,EACPW,SA1BE,SAACR,GAEvBF,EAAcE,EAAES,OAAOF,oB,uBCQhBG,EAfM,SAAC,GAAW,IAAVC,EAAS,EAATA,IAEZC,EAAcD,EAAdC,MAAOC,EAAOF,EAAPE,IAEd,OACI,eAAC,WAAD,WACI,sBAAKR,UAAU,yCAAf,UACI,qBAAKS,IAAKD,EAAKE,IAAI,QACnB,4BAAIH,OAEZ,2BCkDOI,EA3DC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEd,EAA4BrB,mBAAS,IAArC,mBAAOsB,EAAP,KAAeC,EAAf,KAEA,EAA8BvB,oBAAS,GAAvC,mBAAOwB,EAAP,KAAgBC,EAAhB,KAGAC,qBAAW,WAEPC,YAAW,WACPF,GAAW,GACXG,EAAQP,KACT,OAEJ,CAACA,IAEJ,IAAMO,EAAO,uCAAG,WAAOP,GAAP,yBAAAQ,EAAA,6DAERC,EAAWC,UAAUV,GAErBJ,EAJQ,iDAIyCa,EAJzC,+DAMWE,MAAMf,GANjB,cAMNgB,EANM,gBAQSA,EAASC,OARlB,gBAQLC,EARK,EAQLA,KAEDC,EAASD,EAAKE,KAAK,SAACC,GAAU,IAAD,EAC/B,MAAO,CACHC,GAAID,EAAKC,GACTvB,MAAOsB,EAAKtB,MACZC,IAAG,UAAEqB,EAAKhB,cAAP,aAAE,EAAakB,iBAAiBvB,QAM5CM,EAAUa,GApBG,4CAAH,sDAuBb,OACI,eAAC,WAAD,WACI,6BAAKf,IAEJG,GAAW,+CAEX,qBAAKf,UAAU,YAAf,SACQa,EAAOe,KAAI,SAAAtB,GAAG,OAEX,cAAC,EAAD,CAEIA,IAAMA,GADDA,EAAIwB,aCpCtBE,EAdA,WACX,OACI,cAAC,WAAD,UACI,qBAAKhC,UAAU,oCAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,mBAAGA,UAAU,eAAeiC,KAAK,KAAjC,4BCFdC,EAAoB,CAAC,aA8CZC,MA3Cf,WAEE,MAAoC5C,mBAAS2C,GAA7C,mBAAOE,EAAP,KAAmB9C,EAAnB,KAWA,OACE,eAAC,WAAD,WACE,qBAAKU,UAAU,kBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,aAAf,UACE,cAAC,EAAD,CAEAV,cAAiBA,IACjB,uBAGA,6BAIG8C,EAAWR,KAAK,SAAAhB,GAAQ,OAEvB,cAAC,EAAD,CAEEA,SAAWA,GADNA,eC7BJyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae1f140f.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    //State que almacena los datos del Input\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Funcion que detecta los cambios en el input y lo almacena en el state\r\n    const handleInputChange = (e) => {\r\n        \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Funcion que capta el dato del submit y alamcena en el state principal\r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 3){\r\n            setCategories((cat)=> [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }    \r\n    }\r\n\r\n\r\n    return (  \r\n        <Fragment>\r\n            <h3>Agregar Categoria</h3>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"mb-3\">\r\n                    <div className=\"mb-3\">\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\"  \r\n                            value={inputValue}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n\r\n\r\n\r\n            \r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default AddCategory;","import React, { Fragment } from 'react';\r\n\r\n\r\nconst GifGridItems = ({img}) => {\r\n\r\n    const {title, url} = img;\r\n\r\n    return (  \r\n        <Fragment>\r\n            <div className=\"card animate__animated animate__fadeIn\">\r\n                <img src={url} alt=\"img\" />\r\n                <p>{title}</p>\r\n            </div>\r\n        <br />\r\n       </Fragment>\r\n    );\r\n}\r\n \r\nexport default GifGridItems;","import React, { Fragment, useEffect, useState } from 'react';\r\nimport GifGridItems from './GifGridItems';\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n    useEffect( ()=> {   \r\n\r\n        setTimeout(()=>{\r\n            setLoading(false);\r\n            getGifs(category);\r\n        }, 3000)\r\n        \r\n    }, [category]);\r\n\r\n    const getGifs = async (category) =>{\r\n        \r\n        let busqueda = encodeURI(category);  //escapa los espacios en blanco\r\n\r\n        let url =  `https://api.giphy.com/v1/gifs/search?q=${busqueda}&limit=10&api_key=m9I9wxY2Om54adZhgNgtEGX2qYqBciFl`; \r\n        \r\n        const response = await fetch(url);\r\n        \r\n        const {data} = await response.json();   \r\n\r\n        const result = data.map( (iter) => {\r\n            return {\r\n                id: iter.id,\r\n                title: iter.title,\r\n                url: iter.images?.downsized_medium.url\r\n\r\n                //Asigno cada valor a una variable y la devuelvo\r\n            }\r\n        })\r\n\r\n       setImages(result)\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Cargando...!!!</p>}\r\n\r\n             <div className=\"card-grid\">                       \r\n                    {images.map(img => (\r\n                        \r\n                        <GifGridItems \r\n                            key={img.id}\r\n                            img= {img}\r\n                        />\r\n                    ))}\r\n                \r\n            </div>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default GifGrid;\r\n\r\n","import React, { Fragment } from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <Fragment >\r\n            <nav className=\"navbar navbar-light bg-light mb-4\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/#\">\r\n                    Gif App\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, {Fragment, useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\nimport Header from './components/Header';\n\n\nconst InitialCategories = ['One Punch']\n\n\nfunction App() {\n\n  const [categories, setCategories] = useState(InitialCategories);\n\n  /* const handleAdd = ()=> {\n    setCategories([\n      ...categories,\n      'jose'\n    ]);\n  } */\n\n    /* console.log('la lista de categorias es', categories); */\n\n  return (\n    <Fragment>\n      <div className=\"container-fluid\">\n        <Header />\n      </div>\n      <div className=\"contenedor\">\n        <AddCategory \n      \n        setCategories = {setCategories}/>       \n        <hr/>\n        \n        {/* <button onClick={cambiarCategoria}> Agregar</button> */}\n        <ol>\n          {/* <li key={iter}>\n                {iter}\n            </li>  Va  dentro del map*/}\n          {categories.map( category => (\n            \n            <GifGrid\n              key={category} \n              category= {category}\n            />\n          ))}\n        </ol>\n      </div>\n        \n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}